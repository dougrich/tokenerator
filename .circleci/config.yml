version: 2
commands:
  populate-gcp: &populate-gcp
    name: Populate GCP Credentials
    command: |
      echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
      gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      gcloud --quiet config set project ${GCP_PROJECT}
jobs:
  build-tokens:
    docker:
    - image: circleci/node:12
    steps:
    - checkout
    - run: |
        cd ./tooling
        npm i
        npm start -- bundle
    - save_cache:
        key: token-parts-{{ .Revision }}
        paths:
        - ./api/src/token-parts.js
        - ./ux/src/token-parts.js
  build-api:
    machine:
      image: ubuntu-1604:201903-01
    steps:
    - checkout
    - restore_cache:
        key: token-parts-{{ .Revision }}
        paths:
        - ./api/src/token-parts.js
    - run: *populate-gcp
    - run: docker build --rm=false -t us.gcr.io/${GCP_PROJECT}/tokenapi:${CIRCLE_SHA1} ./api
    - run: gcloud docker -- push us.gcr.io/${GCP_PROJECT}/tokenapi:${CIRCLE_SHA1}
  build-ux:
    machine:
      image: ubuntu-1604:201903-01
    steps:
    - checkout
    - restore_cache:
        key: token-parts-{{ .Revision }}
        paths:
        - ./ux/src/token-parts.js
    - run: *populate-gcp
    - run: docker build --rm=false -t us.gcr.io/${GCP_PROJECT}/tokenux:${CIRCLE_SHA1} ./ux
    - run: gcloud docker -- push us.gcr.io/${GCP_PROJECT}/tokenux:${CIRCLE_SHA1}
  build-batch:
    machine:
      image: ubuntu-1604:201903-01
    steps:
    - checkout
    - run: *populate-gcp
    - run: docker build --rm=false -t us.gcr.io/${GCP_PROJECT}/batchprocess:${CIRCLE_SHA1} ./batch
    - run: gcloud docker -- push us.gcr.io/${GCP_PROJECT}/batchprocess:${CIRCLE_SHA1}
  build-gateway:
    machine:
      image: ubuntu-1604:201903-01
    steps:
    - checkout
    - run: *populate-gcp
    - run: docker build --rm=false -t us.gcr.io/${GCP_PROJECT}/gateway:${CIRCLE_SHA1} ./gateway
    - run: gcloud docker -- push us.gcr.io/${GCP_PROJECT}/gateway:${CIRCLE_SHA1}
  create-gcp-template:
    docker:
    - image: google/cloud-sdk
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - run: |
        BUILD_TAG=$(cat /tmp/workspace/buildtag)
        echo "export BUILD_TAG=\"${BUILD_TAG}\"" >> $BASH_ENV
    - checkout
    - run: *populate-gcp
    - run: 
        name: Create startup-script
        command: |
          eval "cat <<EOFF
          #/bin/bash

          useradd cloudservice
          usermod -aG docker cloudservice

          sudo -u cloudservice bash << EOF

          echo '${CONFIG}' > /home/cloudservice/config.json
          echo '${CONFIG_AUTH}' > /home/cloudservice/config.auth.json
          echo '${PRODUCTION_CREDS}' > /home/cloudservice/creds.json

          docker-credential-gcr configure-docker

          docker pull us.gcr.io/${GCP_PROJECT}/batchprocess:${CIRCLE_SHA1} & \
          docker pull us.gcr.io/${GCP_PROJECT}/tokenapi:${CIRCLE_SHA1} & \
          docker pull us.gcr.io/${GCP_PROJECT}/tokenux:${CIRCLE_SHA1} & \
          docker pull us.gcr.io/${GCP_PROJECT}/gateway:${CIRCLE_SHA1} & \
          docker pull dougrich/oauth-aggregator:latest

          docker network create --driver bridge tokens
          docker run -d --restart=\"always\" -v /home/cloudservice/config.auth.json:/app/config.json --network tokens --name=account dougrich/oauth-aggregator:latest
          docker run -d --restart=\"always\" -v /home/cloudservice/config.json:/app/config.json -v /home/cloudservice/creds.json:/gcp/creds.json -e GOOGLE_APPLICATION_CREDENTIALS=/gcp/creds.json --network tokens --name=batch us.gcr.io/${GCP_PROJECT}/batchprocess:${CIRCLE_SHA1}
          docker run -d --restart=\"always\" -v /home/cloudservice/config.json:/app/config.json -v /home/cloudservice/creds.json:/gcp/creds.json -e GOOGLE_APPLICATION_CREDENTIALS=/gcp/creds.json --network tokens --name=api us.gcr.io/${GCP_PROJECT}/tokenapi:${CIRCLE_SHA1}
          docker run -d --restart=\"always\" -v /home/cloudservice/config.json:/app/config.json -v /home/cloudservice/creds.json:/gcp/creds.json -e GOOGLE_APPLICATION_CREDENTIALS=/gcp/creds.json --network tokens --name=ux us.gcr.io/${GCP_PROJECT}/tokenux:${CIRCLE_SHA1}
          docker run -d --restart=\"always\" -v /home/cloudservice/config.json:/app/config.json -v /home/cloudservice/creds.json:/gcp/creds.json -e GOOGLE_APPLICATION_CREDENTIALS=/gcp/creds.json --network tokens --name=gateway -p 80:80 us.gcr.io/${GCP_PROJECT}/gateway:${CIRCLE_SHA1}
          EOF

          EOFF
          " > startup-script.sh
    - run: 
        name: Create build template
        command: ./deploy/create-gcr-template.sh ${BUILD_TAG} startup-script.sh
  rolling-update:
    docker:
    - image: google/cloud-sdk
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - run: |
        BUILD_TAG=$(cat /tmp/workspace/buildtag)
        echo "export BUILD_TAG=\"${BUILD_TAG}\"" >> $BASH_ENV
    - checkout
    - run: *populate-gcp
    - run: 
        name: Apply rolling update
        command: ./deploy/rolling-update.sh ${BUILD_TAG}
  create-ids:
    machine:
      image: ubuntu-1604:201903-01
    steps:
    - run:
        name: Creating workspace
        command: |
          mkdir -p workspace
    - run:
        name: Creating readable buildid
        command: |
          BUILD_TAG=$(date '+%Y-%m-%d-')${CIRCLE_BUILD_NUM}
          echo "${BUILD_TAG}" >> workspace/buildtag
    - persist_to_workspace:
        root: workspace
        paths:
        - buildtag
workflows:
  version: 2
  build:
    jobs:
    - create-ids
    - build-tokens
    - build-api:
        requires:
        - build-tokens
    - build-ux:
        requires:
        - build-tokens
    - build-gateway
    - build-batch
    - create-gcp-template:
        requires:
        - build-api
        - build-batch
        - build-ux
        - build-gateway
        - create-ids
    - rolling-update:
        requires:
        - create-gcp-template
        - create-ids
        filters:
          branches:
            only: master
